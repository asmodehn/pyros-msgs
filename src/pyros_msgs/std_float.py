from __future__ import absolute_import
from __future__ import print_function

import marshmallow
import std_msgs.msg as std_msgs

"""
Defining Schema for basic ros types


These are used when converting a Ros Message (as a type generated by genmsg) to dict, string, json, etc. and also python.

From wiki.ros.org/msg :
Primitive Type    | Serialization                     | C++           | Python
------------------------------------------------------------------------------
float32           | 32-bit IEEE float                 | float         | float
float64           | 64-bit IEEE float                 | double        | float

Array handling:
Array Type        |   Serialization           |  C + +                                        |  Python
-------------------------------------------------------------------------------------------------------
fixed - length    | no extra serialization    | 0.11 +: boost::array, otherwise: std::vector  | tuple(1)
variable - length | uint32 length prefix      | std::vector                                   | tuple(1)

In rospy, arrays are deserialized as tuples for performance reasons, but you can set fields to tuples and lists interchangeably.

Detailed Ref : http://wiki.ros.org/std_msgs


These Fields and Schema are meant to be used together with ROS message type serialization :
ROSTCP --deserialize in rospy--> std_msgs.msg.Float[32/64] --serialize (dump) in pyros_msgs--> dict
And reversely :
dict --deserialize (load) in pyros_msgs--> std_msgs.msg.Float[32/64] --serialize in rospy--> ROSTCP

This helps pyros deal with data only as dicts without worrying about the underlying ROS implementation.
Also some serialization behavior adjustments have been done :

- optional fields

"""

# Both pyros and rospy serialization could eventually be combined, to serialize only once and get a dict.
# TODO : investigate
# KISS as much as possible for now


class RosFloat(marshmallow.fields.Field):
    def _serialize(self, value, attr, obj):
        """Pulls the value for the given key from the object, applies the
        field's formatting and returns the result.

        :param str attr: The attribute or key to get from the object.
        :param str obj: The object to pull the key from.
        :raise ValidationError: In case of formatting problem
        """
        if value is None:
            return ''
        return value.title()

    def _deserialize(self, value, attr, data):
        """Deserialize ``value``.
        :raise ValidationError: If an invalid value is passed or if a required value
            is missing.
        """
        return bool(value)

RosFloat32 = RosFloat
RosFloat64 = RosFloat

class RosString(marshmallow.fields.Field):
    def _serialize(self, value, attr, obj):
        """Pulls the value for the given key from the object, applies the
        field's formatting and returns the result.

        :param str attr: The attribute or key to get from the object.
        :param str obj: The object to pull the key from.
        :raise ValidationError: In case of formatting problem
        """
        if value is None:
            return ''
        return value.title()

    def _deserialize(self, value, attr, data):
        """Deserialize ``value``.
        :raise ValidationError: If an invalid value is passed or if a required value
            is missing.
        """
        return bool(value)


class RosTime(marshmallow.fields.Field):
    def _serialize(self, value, attr, obj):
        """Pulls the value for the given key from the object, applies the
        field's formatting and returns the result.

        :param str attr: The attribute or key to get from the object.
        :param str obj: The object to pull the key from.
        :raise ValidationError: In case of formatting problem
        """
        if value is None:
            return ''
        return value.title()

    def _deserialize(self, value, attr, data):
        """Deserialize ``value``.
        :raise ValidationError: If an invalid value is passed or if a required value
            is missing.
        """
        return bool(value)


class RosDuration(marshmallow.fields.Field):
    def _serialize(self, value, attr, obj):
        """Pulls the value for the given key from the object, applies the
        field's formatting and returns the result.

        :param str attr: The attribute or key to get from the object.
        :param str obj: The object to pull the key from.
        :raise ValidationError: In case of formatting problem
        """
        if value is None:
            return ''
        return value.title()

    def _deserialize(self, value, attr, data):
        """Deserialize ``value``.
        :raise ValidationError: If an invalid value is passed or if a required value
            is missing.
        """
        return bool(value)